name: Create Release and Publish to PyPI (or Test PyPi)

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # erforderlich für Upload zu GitHub Releases

jobs:
  release:
    name: 🛠️ Build & Release
    runs-on: windows-latest

    steps:
      - name: ✨ Checkout code
        uses: actions/checkout@v4

      - name: ⚖️ Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📥 Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry toml pathlib

      - name: 📝 Update pyproject.toml version from tag
        run: python scripts/update_version.py ${{ github.ref_name }}


      - name: 📦 Install dependencies (incl. build + pyinstaller)
        run: |
          poetry self add poetry-plugin-export
          poetry install --with dev
          poetry run pip install pyinstaller

      - name: 🧪 Run tests (if available)
        run: poetry run pytest tests

      - name: 🧠 Lint code
        run: poetry run pylint mqtt_presence

      - name: 🛠️ Build package
        run: poetry build

      - name: 🏗️ Build .exe with PyInstaller
        run: |
          poetry run pyinstaller mqtt-presence.spec

      - name: Rename executable with version
        run: |
          $tag = "${{ github.ref_name }}"
          Rename-Item -Path "dist/mqtt-presence.exe" -NewName "mqtt-presence-$tag.exe"

      - name: 💾 Upload artifacts to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/mqtt-presence-${{ github.ref_name }}.exe
            dist/*.whl
            dist/*.tar.gz

      ## Needs ubuntu
      #- name: 🚀 Publish to PyPI or TestPyPI via Trusted Publisher
      #  if: startsWith(github.ref_name, 'v')
      #  uses: pypa/gh-action-pypi-publish@release/v1
      #  with:
      #    skip-existing: true
      #    repository-url: ${{ startsWith(github.ref_name, 'v') && contains(github.ref_name, 'a') && 'https://test.pypi.org/legacy/' || '' }}


      - name: 📥 Install Twine
        run: python -m pip install --upgrade twine


      - name: 🚀 Publish to PyPI or TestPyPI
        shell: pwsh
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
          TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          if ($env:GITHUB_REF_NAME -like '*a*') {
            Write-Host "Detected 'a' in tag — uploading to TestPyPI"
            $env:TWINE_PASSWORD = $env:TEST_PYPI_TOKEN
            twine upload --repository-url https://test.pypi.org/legacy/ dist/*.whl dist/*.tar.gz
          } else {
            Write-Host "Uploading to PyPI"
            $env:TWINE_PASSWORD = $env:PYPI_TOKEN
            twine upload dist/*.whl dist/*.tar.gz
          }