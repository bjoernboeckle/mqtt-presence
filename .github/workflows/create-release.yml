name: Create Release and Publish to PyPI + Docker

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # erforderlich für Upload zu GitHub Releases

env:
  IMAGE_NAME: mqtt-presence

jobs:
  release:
    name: 🛠️ Build & Release
    runs-on: windows-latest

    steps:
      - name: ✨ Checkout code
        uses: actions/checkout@v4

      - name: ⚖️ Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📥 Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry toml pathlib

      - name: 📝 Update pyproject.toml version from tag
        run: python scripts/update_version.py ${{ github.ref_name }}

      - name: 📦 Install dependencies
        run: |
          poetry self add poetry-plugin-export
          poetry install --with dev
          poetry run pip install pyinstaller

      - name: 🧪 Run tests
        run: poetry run pytest tests

      - name: 🧠 Lint code
        run: poetry run pylint mqtt_presence

      - name: 🛠️ Build package
        run: poetry build

      - name: 🏗️ Build .exe with PyInstaller
        run: |
          poetry run pyinstaller mqtt-presence.spec

      - name: 🏷️ Rename executable with version
        run: |
          $tag = "${{ github.ref_name }}"
          Rename-Item -Path "dist/mqtt-presence.exe" -NewName "mqtt-presence-$tag.exe"

      - name: 🏗️ Install Inno Setup
        run: |
          choco install innosetup --yes
        shell: pwsh

      - name: 📦 Build Inno Setup installer
        run: |
          $tag = "${{ github.ref_name }}"
          $exeName = "mqtt-presence-$tag.exe"
          $issFile = "installer/mqtt-presence-setup.iss"
          $version = $tag.TrimStart("v")
          (Get-Content $issFile) -replace "define MyAppVersion .*", "define MyAppVersion `"$version`"" | Set-Content $issFile
          (Get-Content $issFile) -replace "define MyAppExeName .*", "define MyAppExeName `"$exeName`"" | Set-Content $issFile
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" $issFile
        shell: pwsh

      - name: 💾 Upload artifacts and installer to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/mqtt-presence-${{ github.ref_name }}.exe
            dist/*.whl
            dist/*.tar.gz
            dist/mqtt-presence-${{ github.ref_name }}-setup.exe


      ## Needs ubuntu
      #- name: 🚀 Publish to PyPI or TestPyPI via Trusted Publisher
      #  if: startsWith(github.ref_name, 'v')
      #  uses: pypa/gh-action-pypi-publish@release/v1
      #  with:
      #    skip-existing: true
      #    repository-url: ${{ startsWith(github.ref_name, 'v') && contains(github.ref_name, 'a') && 'https://test.pypi.org/legacy/' || '' }}

      - name: 📥 Install Twine
        run: python -m pip install --upgrade twine

      - name: 🚀 Publish to PyPI or TestPyPI
        shell: pwsh
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
          TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          if ($env:GITHUB_REF_NAME -like '*a*') {
            Write-Host "Uploading to TestPyPI"
            $env:TWINE_PASSWORD = $env:TEST_PYPI_TOKEN
            twine upload --repository-url https://test.pypi.org/legacy/ dist/*.whl dist/*.tar.gz
          } else {
            Write-Host "Uploading to PyPI"
            $env:TWINE_PASSWORD = $env:PYPI_TOKEN
            twine upload dist/*.whl dist/*.tar.gz
          }

          
  docker:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🔐 Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: 🐳 Build and tag Docker image
        run: |
          docker build -t mqtt-presence:base .
          docker tag mqtt-presence:base ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          docker tag mqtt-presence:base ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          docker tag mqtt-presence:base ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          docker tag mqtt-presence:base ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}

      - name: 📤 Push to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}

      - name: 📤 Push to GitHub Container Registry
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
