name: Create Release and Publish to PyPI + Docker

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # erforderlich für Upload zu GitHub Releases

env:
  IMAGE_NAME: mqtt-presence

jobs:
  release:
    name: 🛠️ Build & Release
    runs-on: windows-latest

    steps:
      - name: ✨ Checkout code
        uses: actions/checkout@v4

      - name: ⚖️ Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: 📥 Install Poetry, toml, Twine and wingetcreate
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade poetry toml pathlib twine wingetcreate

      - name: 📦 Install dependencies
        run: |
          poetry self add poetry-plugin-export
          poetry install --with dev
          poetry run pip install --upgrade pyinstaller

      - name: 🏗️ Install Inno Setup
        run: |
          choco install innosetup --yes
        shell: pwsh

      - name: 🍫 Install Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        shell: pwsh


      - name: 📝 Update pyproject.toml version from tag and create version.py
        run: python scripts/make.py set-version ${{ github.ref_name }}


      - name: 🛠️ Build all (lint, test, create exe, setup and prepare package distribution files)
        run: python scripts/make.py all


      - name: 💾 Upload artifacts and installer to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/mqtt-presence-${{ github.ref_name }}.exe
            dist/*.whl
            dist/*.tar.gz
            dist/mqtt-presence-${{ github.ref_name }}-setup.exe




      - name: 🚀 Push Chocolatey-Paket zu chocolatey.org
        run: |
          $version = "${{ github.ref_name }}".TrimStart("v")
          choco push dist/mqtt-presence.$version.nupkg --source https://push.chocolatey.org/ --api-key ${{ secrets.CHOCOLATEY_API_KEY }}

      - name: 🪟 📦 Submit to Winget
        run: wingetcreate submit installer/winget/ --token ${{ secrets.CR_PAT }}

        
      - name: 🚀 Publish to PyPI or TestPyPI
        shell: pwsh
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
          TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          if ($env:GITHUB_REF_NAME -like '*a*') {
            Write-Host "Uploading to TestPyPI"
            $env:TWINE_PASSWORD = $env:TEST_PYPI_TOKEN
            twine upload --repository-url https://test.pypi.org/legacy/ dist/*.whl dist/*.tar.gz
          } else {
            Write-Host "Uploading to PyPI"
            $env:TWINE_PASSWORD = $env:PYPI_TOKEN
            twine upload dist/*.whl dist/*.tar.gz
          }

          
  docker:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🔐 Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: 🐳 Build and tag Docker image
        run: |
          docker build -t mqtt-presence:base .
          docker tag mqtt-presence:base ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          docker tag mqtt-presence:base ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          docker tag mqtt-presence:base ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          docker tag mqtt-presence:base ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}

      - name: 📤 Push to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}

      - name: 📤 Push to GitHub Container Registry
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
